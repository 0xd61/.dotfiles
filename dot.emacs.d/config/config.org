
#+title: Emacs - Configuration
#+property: header-args:emacs-lisp  :mkdirp yes :lexical t :exports code
#+property: header-args:emacs-lisp+ :tangle init.el
#+property: header-args:emacs-lisp+ :mkdirp yes :noweb no-export

This is my emacs configuration. It is based on a [[https://blog.dornea.nu/2024/02/22/from-doom-to-vanilla-emacs/][Blogpost]] by Victor Dorneanu and the emacs config from [[https://config.phundrak.com/emacs/][phundrak]].

* Code Blocks
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
This section is used to create reusable codeblocks by using the [[https://orgmode.org/manual/Noweb-Reference-Syntax.html][Noweb-Syntax]].

** Example
#+name: foo
#+begin_src emacs-lisp
(print "foo")
#+end_src

#+name: foobar
#+begin_src org
<<foo>>
#+end_src

* Basic Configuration
** Early Init
:PROPERTIES:
:header-args:emacs-lisp: :tangle early-init.el :mkdirp yes
:header-args:emacs-lisp+: :exports code :results silent :lexical t
:END:

The early init file is the file loaded before anything else in Emacs. This is where I put some options in order to disable as quickly as possible some built-in features of Emacs before they can be even loaded, speeding Emacs up a bit.

#+begin_src emacs-lisp
  (setq package-enable-at-startup nil
        inhibit-startup-message   t
        frame-resize-pixelwise    t  ; fine resize
        package-native-compile    t) ; native compile packages
  (scroll-bar-mode -1)               ; disable scrollbar
  (tool-bar-mode -1)                 ; disable toolbar
  (tooltip-mode -1)                  ; disable tooltips
  (set-fringe-mode 10)               ; give some breathing room
  (menu-bar-mode -1)                 ; disable menubar
  (blink-cursor-mode 0)              ; disable blinking cursor

  (setq frame-inhibit-implied-resize t)
  (setq inhibit-compacting-font-caches t)
#+end_src

*** Defer garbage collection
Defer garbage collection further back in the startup process, according to [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][hlissner]].

#+BEGIN_QUOTE
The GC eats up quite a bit of time, easily doubling startup time. The trick is to turn up the memory threshold as early as possible.
#+END_QUOTE

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

*** Unset =file-name-handler-alist=
Every file opened and loaded by Emacs will run through this list to check for a proper handler for the file, but during startup, it won't need any of them.

#+begin_src emacs-lisp
  (defvar file-name-handler-alist-original file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src
*** Disable =site-run-file=
#+begin_src emacs-lisp
  (setq site-run-file nil)
#+end_src

** Undo
Stop Emacs from losing undo information by setting very high limits for undo buffers.

#+begin_src emacs-lisp
  (setq undo-limit 20000000)
  (setq undo-strong-limit 40000000)
#+end_src

** Garbage Collection
*** Set =gc-cons-threshold= Smaller for Interactive Use
A large =gc-cons-threshold= may cause freezing and stuttering during long-term interactive use.
If you experience freezing, decrease this amount, if you experience stuttering, increase this amount.

#+begin_src emacs-lisp
(defvar better-gc-cons-threshold (* 128 1024 1024) ; 128mb
  "The default value to use for `gc-cons-threshold'.

If you experience freezing, decrease this.  If you experience stuttering, increase this.")

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold better-gc-cons-threshold)
            (setq file-name-handler-alist file-name-handler-alist-original)
            (makunbound 'file-name-handler-alist-original)))
#+end_src

Garbage Collect when Emacs is out of focus and avoid garbage collection when using minibuffer.

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (if (boundp 'after-focus-change-function)
                (add-function :after after-focus-change-function
                              (lambda ()
                                (unless (frame-focus-state)
                                  (garbage-collect))))
              (add-hook 'after-focus-change-function 'garbage-collect))
            (defun gc-minibuffer-setup-hook ()
              (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

            (defun gc-minibuffer-exit-hook ()
              (garbage-collect)
              (setq gc-cons-threshold better-gc-cons-threshold))

            (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
            (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
#+end_src

** Stay Clean, Emacs!
As nice as Emacs is, it isn't very polite or clean by default: open a file, and it will create backup files in the same directory. But then, when you open your directory with your favourite file manager and see almost all of your files duplicated with a =~= appended to the filename, it looks really uncomfortable! This is why I prefer to tell Emacs to keep its backup files to itself in a directory it only will access.
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . ,(expand-file-name ".tmp/backups/"
                                                           user-emacs-directory))))
#+end_src

** Stay Polite, Emacs!
When asking for our opinion on something, Emacs loves asking us to answer by yes or no, but *in full*! That's very rude! Fortunately, we can fix this. Note that the configuration changed in Emacs 29.
#+begin_src emacs-lisp
  (if (version<= emacs-version "28")
      (defalias 'yes-or-no-p 'y-or-n-p)
    (setopt use-short-answers t))
#+end_src

This will make Emacs ask us for either hitting the ~y~ key for yes, or the ~n~ key for no. Much more polite!

It is also very impolite to keep a certain version of a file in its buffer when said file has changed on disk. Let's change this
behaviour:
#+begin_src emacs-lisp
(global-auto-revert-mode 1)
#+end_src

Much more polite! Note that if the buffer is modified and its changes haven't been saved, it will not automatically revert the buffer and your unsaved changes won't be lost. Very polite!

** Autosave
Autosave is a useful feature we want to have enabled.

#+begin_src emacs-lisp
  (setq auto-save-default t)
#+end_src

** Window
We want emacs to take new window space from all other windows.
#+begin_src emacs-lisp
  (setq window-combination-resize t)
#+end_src

** Personal Information
Not sure which packages need this information but some probably will need it.

#+begin_src emacs-lisp
  (setq user-full-name       "Daniel Glinka"
        user-real-login-name "Daniel Glinka"
        user-login-name      "dgl"
#+end_src

* Visuals
The first visual setting in this section will activate the visible bell. What it does is I get a visual feedback each time I do something Emacs doesn't agree with, like trying to go up a line when I'm already at the top of the buffer.
#+begin_src emacs-lisp
(setq visible-bell t)
#+end_src

It is nicer to see a cursor cover the actual space of a character.
#+begin_src emacs-lisp
(setq x-stretch-cursor t)
#+end_src

When text is ellipsed, I want the ellipsis marker to be a single character of three dots. Let's make it so:
#+begin_src emacs-lisp
(with-eval-after-load 'mule-util
 (setq truncate-string-ellipsis "â€¦"))
#+end_src
*** Fonts
I don't like the default font I usually have on my machines, I really don't. I prefer [[Cascadia Code][Input Mono]].
#+begin_src emacs-lisp
  (defvar dgl/default-font-size 110
    "Default font size.")

  (defvar dgl/default-font-name "InputMono"
    "Default font.")

  (defun my/set-font ()
    (when (find-font (font-spec :name dgl/default-font-name))
      (set-face-attribute 'default nil
                          :font dgl/default-font-name
                          :height dgl/default-font-size)))

  (my/set-font)
  (add-hook 'server-after-make-frame-hook #'my/set-font)
#+end_src
*** Frame Title
This is straight-up copied from [[https://tecosaur.github.io/emacs-config/config.html#window-title][TEC]]'s configuration. See their comment on the matter.
#+begin_src emacs-lisp
(setq frame-title-format
      '(""
        "%b"
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p) " ? %s" "  ?  %s - Emacs") project-name))))))
#+end_src
* Packages
* Completion
* Keybindings
* Programming
* Org
* Custom Functions
